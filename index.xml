<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alanfliu Blog</title>
    <link>https://alanfliu.github.io/</link>
    <description>Recent content on Alanfliu Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 06 Jun 2024 23:23:35 +0800</lastBuildDate>
    <atom:link href="https://alanfliu.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>NestJS的基本使用</title>
      <link>https://alanfliu.github.io/posts/nestjs%E4%B8%AD%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8/</link>
      <pubDate>Thu, 06 Jun 2024 23:23:35 +0800</pubDate>
      <guid>https://alanfliu.github.io/posts/nestjs%E4%B8%AD%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8/</guid>
      <description>使用Nest-cli创建项目&#xA;nest new nest-decorator -p pnpm 装饰器大部分为函数&#xA;1 Provider、Controller和Module Provider、Contoller和Module三个装饰器是NestJS中最基础的三个装饰器，分别对应模块、控制器和服务三个概念&#xA;模块Module： Nest程序由一个个模块组成， 模块中包括控制器和服务&#xA;控制器 Controller: 用来处理路由， 控制器其实就是一个类， 其中的每个方法称为Handler, 用来调用处理对应的业务逻辑， 通常将业务逻辑封装在Server中处理&#xA;服务Servicer: 处理业务逻辑&#xA;Nest通过Module装饰器来创建模块，通过 @Controller、@Injectable 分别声明其中的 controller 和 provider&#xA;import { Module } from &amp;#39;@nestjs/common&amp;#39;; import { AppController } from &amp;#39;./app.controller&amp;#39;; import { AppService } from &amp;#39;./app.service&amp;#39;; @Module({ imports: [], controllers: [AppController], providers: [ AppService, { provide: &amp;#39;APP_CONFIG&amp;#39;, useValue: &amp;#39;app config value&amp;#39; } ], }) export class AppModule { } import { Controller, Get, Inject } from &amp;#39;@nestjs/common&amp;#39;; import { AppService } from &amp;#39;.</description>
    </item>
  </channel>
</rss>
