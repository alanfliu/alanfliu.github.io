<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Alanfliu Blog</title>
    <link>https://alanfliu.github.io/posts/</link>
    <description>Recent content in Posts on Alanfliu Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 29 Jun 2024 20:42:33 +0800</lastBuildDate>
    <atom:link href="https://alanfliu.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[TodoApp] 第一章 基础配置·</title>
      <link>https://alanfliu.github.io/posts/%E5%9F%BA%E4%BA%8Enestjs&#43;jwt%E5%AE%9E%E7%8E%B0%E7%99%BB%E9%99%86%E6%B3%A8%E5%86%8C/</link>
      <pubDate>Sat, 29 Jun 2024 20:42:33 +0800</pubDate>
      <guid>https://alanfliu.github.io/posts/%E5%9F%BA%E4%BA%8Enestjs&#43;jwt%E5%AE%9E%E7%8E%B0%E7%99%BB%E9%99%86%E6%B3%A8%E5%86%8C/</guid>
      <description>1 需求背景 最近在学习 NestJS，想基于 NestJS 入门后端开发。在学习一段知识后想做个项目练练手，对于前端程序员来说，最熟悉的练手项目当然是 TodoList。 TodoList 无非就是对 Todo 进行增删改查， 非常适合用来练手&#xA;2 基础配置 2.1 初始化项目 首先使用 nest cli 新建一个项目：&#xA;nest new todolist-app -p pnpm 在新建的项目中， 修改 .prettier 文件，如下（我比较喜欢这个配置, 因此做了修改）：&#xA;{ &amp;#34;arrowParens&amp;#34;: &amp;#34;always&amp;#34;, &amp;#34;bracketSameLine&amp;#34;: true, &amp;#34;bracketSpacing&amp;#34;: true, &amp;#34;embeddedLanguageFormatting&amp;#34;: &amp;#34;auto&amp;#34;, &amp;#34;htmlWhitespaceSensitivity&amp;#34;: &amp;#34;css&amp;#34;, &amp;#34;insertPragma&amp;#34;: false, &amp;#34;jsxSingleQuote&amp;#34;: false, &amp;#34;proseWrap&amp;#34;: &amp;#34;never&amp;#34;, &amp;#34;quoteProps&amp;#34;: &amp;#34;as-needed&amp;#34;, &amp;#34;requirePragma&amp;#34;: false, &amp;#34;printWidth&amp;#34;: 120, &amp;#34;semi&amp;#34;: true, &amp;#34;singleQuote&amp;#34;: true, &amp;#34;tabWidth&amp;#34;: 4, &amp;#34;trailingComma&amp;#34;: &amp;#34;all&amp;#34;, &amp;#34;useTabs&amp;#34;: false, &amp;#34;vueIndentScriptAndStyle&amp;#34;: false, &amp;#34;singleAttributePerLine&amp;#34;: false } 之后启动项目：&#xA;pnpm run start:dev 在浏览器中， 输入 http://localhost:3000,可以看到以下信息， 说明项目初始化创建成功</description>
    </item>
    <item>
      <title>Typescript-类型工具与泛型</title>
      <link>https://alanfliu.github.io/posts/ts%E5%AD%A6%E4%B9%A0-%E6%B3%9B%E5%9E%8B/</link>
      <pubDate>Sat, 22 Jun 2024 14:14:35 +0800</pubDate>
      <guid>https://alanfliu.github.io/posts/ts%E5%AD%A6%E4%B9%A0-%E6%B3%9B%E5%9E%8B/</guid>
      <description>前言 最近在重新学习 Typescript, 从类型工具与泛型开始梳理起， 毕竟泛型是 TS 的灵魂之一， 而泛型是离不开类型工具的； 这篇博客从以下三点开启梳理：&#xA;类型工具 泛型 常见工具函数的模拟实现 1 类型工具 类型工具顾名思义，它就是对类型进行处理的工具。按照使用目的来划分，类型工具可以分为 类型创建 与 类型安全保护 两类。&#xA;类型工具：负责创建类型 类型安全保护：负责守卫类型 1.1 类型工具 联合类型很简单， 看下面的代码：&#xA;interface NameStruct { name: string; } interface AgeStruct { age: number; } type NameOrAge = NameStruct | AgeStruct; const p: NameOrAge = { name: &amp;#34;12&amp;#34;, age: 12, }; const p2: NameOrAge = { name: &amp;#34;12&amp;#34;, }; const p3: NameOrAge = { age: 12, }; 如何两个类型 A 和 B 组成一个联合类型 C, 那么 C 就需要符合要么是 A，要么是 B， 要么是 AB</description>
    </item>
  </channel>
</rss>
